// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TSocket.h>
#include "save_client/Save.h"

#include<iostream>
#include<thread> //引入多线程
#include<mutex>//引入锁，当一个线程持有锁时其他所有线程阻塞
#include<condition_variable>//引入条件变量(封装锁)，配合锁实现消费队列
#include<queue>
#include<vector>//存匹配池的玩家i
#include<unistd.h>//sleep函数头文件

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;
using namespace  ::save_service;//注意加命名空间

using namespace std;//仅作测试用，多人开发时不能用这个


//定义消费队列
struct Task
{
    User user;
    string type;
};

struct MessageQueue
{
    queue<Task> q;
    mutex m; //唯一锁
    condition_variable cv;
}message_queue;


class Pool   //匹配池
{
    public:
        void save_result(int a ,int b)//输入两个id
        {
            printf("Match Result : %d %d\n",a,b);

            //官网clinet代码复制于此
            std::shared_ptr<TTransport> socket(new TSocket("123.57.67.128", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int res=client.save_data("acs_11842","93f93b4b",a,b);
                if(!res) puts("success!");//判断是否上传云端成功，成功则res为0“exitcode”
                else puts("failed");

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }

        void match()
        {
            while(users.size()>=2)
            {
                bool flag = true;

                //先把所有人的分数排序
                sort(users.begin(),users.end(),[&](User& a ,User b){
                    return a.score<b.score;
                        });//自定义sort

                for (uint32_t i=1;i<users.size();i++)
                {
                    auto a = users[i-1], b = users[i];

                    if (b.score - a.score <=50)
                    {
                        users.erase(users.begin()+i-1,users.begin()+i+1);//删除匹配成功的两位
                        save_result(a.id,b.id);

                        flag = false;
                        break;
                    }

                    if (flag) break;//玩家分差过大且玩家过少，无法依据现有逻辑匹配，会进入死循环

                }
            }
        }

        void add(User user)
        {
            users.push_back(user);
        }

        void remove(User user)
        {
            //找到id来删除
            for (uint32_t i=0;i<users.size();i++)
                if (users[i].id == user.id)
                {
                    users.erase(users.begin()+i);
                    break;
                }
        }

    private:
        vector<User> users;
}pool;

class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");

            unique_lock<mutex> lck(message_queue.m);//用m给线程上锁
            message_queue.q.push({user,"add"});
            message_queue.cv.notify_all();//通知所有cv下阻塞的进程，有新的操作了，可以执行随机的下一个线程了

            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");

            unique_lock<mutex> lck(message_queue.m);//两个线程同时仅有一个能有锁，无锁的阻塞于此，等待拿锁
            message_queue.q.push({user,"remove"});
            message_queue.cv.notify_all();
            return 0;
        }

};


//增加多线程操作
//经典的消费者-生产者模型
void consume_task() //死循环，一直判断匹配情况
{
    while(true)
    {
        unique_lock<mutex> lck(message_queue.m);
        if (message_queue.q.empty())
        {
           //此方法已被优化 message_queue.cv.wait(lck); //队列空，为了节省cpu资源，阻塞于此，等待唤醒

            lck.unlock();
            pool.match();
            sleep(1);//每秒匹配一次
        }
        else
        {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();//用完后记得解锁

            //do task,即把玩家放入匹配池
            if (task.type == "add")
            {
                pool.add(task.user);
            }else if (task.type == "remove")
            {
                pool.remove(task.user);
            }

            pool.match();
        }
    }
}

int main(int argc, char **argv) {
    int port = 9090;
    ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

    cout << "Started!" << endl ;

    //开一个线程
    thread matching_thread(consume_task);

    server.serve();
    return 0;
}

